[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"


[project]
name = "cats"
authors = [
  { name = "CATS", email = "nstarman@users.noreply.github.com" },
]
description = "Community Atlas of Tidal Streams"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]
dynamic = ["version"]
dependencies = [
  "numpy",
  "scipy>1.10",
  "astropy",
  "matplotlib",
  "gala",
  "galstreams",
  "pyia",
  "astroquery",
  "dustmaps",
  "asdf",
  "ugali",
]

[project.optional-dependencies]
test = [
  "pytest >=6",
  "pytest-cov >=3",
]
dev = [
  "pytest >=6",
  "pytest-cov >=3",
]
docs = [
  "sphinx>=7.0",
  "myst_parser>=0.13",
  "sphinx_copybutton",
  "sphinx_autodoc_typehints",
  "furo>=2023.08.17",
]

[project.urls]
Homepage = "https://github.com/stellarstreams/cats"
"Bug Tracker" = "https://github.com/stellarstreams/cats/issues"
Discussions = "https://github.com/stellarstreams/cats/discussions"
Changelog = "https://github.com/stellarstreams/cats/releases"


[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/cats/_version.py"
envs.default.dependencies = [
  "pytest",
  "pytest-cov",
]


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]

[tool.codespell]
ignore-words-list = """
afe,
ue,
"""


[tool.coverage]
run.source = ["cats"]
port.exclude_lines = [
  'pragma: no cover',
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["src", "tests"]
python_version = "3.9"
warn_unused_configs = true
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "cats.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]
src = ["src"]

[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "NPY",         # NumPy specific rules
  "PD",          # pandas-vet
]
ignore = [
  "PD",  # Pandas
  "PLR",    # Design related pylint codes
  # TODO: fix these and remove
  "ARG001",  # Unused function argument `X`
  "ARG003",  # Unused method argument `X`
  "E711",  # Comparison to `None` should be `cond is None`
  "E731",  # Do not assign a `lambda` expression, use a `def`
  "EM101",  # Exception must not use a string literal, assign to variable first
  "F821",  # Undefined name `X`
  "PT018",  # Assertion should be broken down into multiple parts
  "RET504",  # Unnecessary assignment `return` statement
  "RET505",  # Unnecessary `else` after `return`
  "SIM118",  # Use `key in dict` instead of `key in dict.keys()`
  "T201",  # `print` found
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["cats._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]
# TODO: fix these and remove
"src/cats/pawprint/tests/mwe.py" = ["F821"]


[tool.pylint]
py-version = "3.9"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "wrong-import-position",
]
